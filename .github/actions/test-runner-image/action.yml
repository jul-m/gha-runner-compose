name: "Test Runner Image"
description: "Builds, boots, waits, and cleans up a GitHub Actions runner container for a given image"
author: "jul-m"

inputs:
  image-tag:
    description: "Local Docker tag used to reference the built image"
    required: true
  build-target:
    description: "Dockerfile target stage to build"
    required: true
  runner-suffix:
    description: "Suffix used to generate unique runner/container names"
    required: true
  runner-components:
    description: "Optional RUNNER_COMPONENTS value passed during build"
    required: false
    default: ""
  test-job-name:
    description: "Name of the job that must succeed when executed on the started runner"
    required: true
  additional-runner-labels:
    description: "Optional extra runner labels (comma-separated) appended to the dynamic label"
    required: false
    default: ""
  github-token:
    description: "Token used by gh CLI to manage the runner lifecycle and check workflow job status"
    required: true

outputs:
  runner-name:
    description: "Name assigned to the temporary self-hosted runner"
    value: ${{ steps.setup-context.outputs.runner_name }}
  runner-label:
    description: "Primary label assigned to the temporary self-hosted runner"
    value: ${{ steps.setup-context.outputs.runner_label }}
  container-name:
    description: "Docker container name used for the temporary runner"
    value: ${{ steps.setup-context.outputs.container_name }}

runs:
  using: "composite"
  steps:
    - id: setup-context
      shell: bash
      run: |  # shell
        # Setup context variables
        RUNNER_NAME="test-runner-${{ inputs.runner-suffix }}-${{ github.run_id }}"
        RUNNER_LABEL="test-runner-${{ inputs.runner-suffix }}-${{ github.run_id }}"
        CONTAINER_NAME="test-runner-${{ inputs.runner-suffix }}-${{ github.run_id }}"
        IMAGE_TAG="${{ inputs.image-tag }}"
        ADDITIONAL_LABELS="${{ inputs.additional-runner-labels }}"
        if [[ -n "${ADDITIONAL_LABELS}" ]]; then
          RUNNER_LABELS="${RUNNER_LABEL},${ADDITIONAL_LABELS}"
        else
          RUNNER_LABELS="${RUNNER_LABEL}"
        fi
        {
          echo "RUNNER_NAME=${RUNNER_NAME}"
          echo "RUNNER_LABEL=${RUNNER_LABEL}"
          echo "RUNNER_LABELS=${RUNNER_LABELS}"
          echo "CONTAINER_NAME=${CONTAINER_NAME}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
        } >>"$GITHUB_ENV"
        {
          echo "runner_name=${RUNNER_NAME}"
          echo "runner_label=${RUNNER_LABEL}"
          echo "runner_labels=${RUNNER_LABELS}"
          echo "container_name=${CONTAINER_NAME}"
        } >>"$GITHUB_OUTPUT"

    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker
      uses: docker/setup-docker-action@v4

    - name: Set up Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build image
      uses: docker/build-push-action@v6
      with:
        context: .
        load: true
        target: ${{ inputs.build-target }}
        tags: ${{ inputs.image-tag }}
        cache-from: |
          type=gha,scope=${{ github.workflow }}-${{ inputs.runner-suffix }}
        cache-to: |
          type=gha,mode=max,scope=${{ github.workflow }}-${{ inputs.runner-suffix }}
        build-args: |
          RUNNER_COMPONENTS=${{ inputs.runner-components }}

    - name: Verify image was built
      shell: bash
      run: |  # shell
        # Verify image was built
        docker image ls "${IMAGE_TAG}"
        docker image inspect "${IMAGE_TAG}" --format='{{json .}}' | jq '.RepoTags, .Size'

    - name: Start runner container
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |  # shell
        # Start runner container
        TOKEN=$(gh api --method POST "repos/${{ github.repository }}/actions/runners/registration-token" --jq .token)
        docker run -d --name "${CONTAINER_NAME}" \
          -e RUNNER_REPO_URL="${{ github.server_url }}/${{ github.repository }}" \
          -e RUNNER_TOKEN="${TOKEN}" \
          -e RUNNER_NAME="${RUNNER_NAME}" \
          -e RUNNER_LABELS="${RUNNER_LABELS}" \
          "${IMAGE_TAG}"

    - name: Wait for runner registration and execution
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |  # shell
        # Wait for runner registration and execution
        counter=0
        while true; do
          echo "Waiting for runner readiness..."
          if ! docker ps --format '{{.Names}}' | grep -qx "${CONTAINER_NAME}"; then
            echo "❌ Runner container ${CONTAINER_NAME} has stopped unexpectedly."
            echo "Runner logs:"
            docker logs "${CONTAINER_NAME}" 2>&1
            exit 1
          fi

          LOGS=$(docker logs "${CONTAINER_NAME}" 2>&1)
          if echo "${LOGS}" | grep -q "Listening for Jobs"; then
            echo "✅ Runner registered successfully."
            break
          fi

          counter=$((counter + 1))
          if [[ ${counter} -ge 30 ]]; then
            echo "❌ Timeout waiting for runner to register."
            echo "Runner logs:"
            echo "${LOGS}"
            exit 1
          fi

          sleep 10
        done

        echo "Waiting for job '${{ inputs.test-job-name }}' to complete..."
        counter=0
        while true; do
          JOB_STATUS=$(gh api "repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs" \
            --jq ".jobs[] | select(.name == \"${{ inputs.test-job-name }}\") | .conclusion")

          if [[ "${JOB_STATUS}" == "success" ]]; then
            echo "✅ Job '${{ inputs.test-job-name }}' completed successfully."
            break
          elif [[ "${JOB_STATUS}" == "failure" || "${JOB_STATUS}" == "cancelled" || "${JOB_STATUS}" == "timed_out" ]]; then
            echo "❌ Job '${{ inputs.test-job-name }}' failed with status: ${JOB_STATUS}"
            exit 1
          fi

          counter=$((counter + 1))
          if [[ ${counter} -ge 30 ]]; then
            echo "❌ Timeout waiting for job '${{ inputs.test-job-name }}' to complete."
            exit 1
          fi

          sleep 10
        done

    - name: Cleanup runner
      if: always()
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |  # shell
        # Cleanup runner
        docker stop "${CONTAINER_NAME}" >/dev/null 2>&1 || true
        docker rm "${CONTAINER_NAME}" >/dev/null 2>&1 || true

        RUNNER_ID=$(gh api "repos/${{ github.repository }}/actions/runners" \
          --jq ".runners[] | select(.name == \"${RUNNER_NAME}\") | .id" 2>/dev/null || echo "")

        if [[ -n "${RUNNER_ID}" ]]; then
          echo "Removing runner with ID: ${RUNNER_ID}"
          gh api --method DELETE "repos/${{ github.repository }}/actions/runners/${RUNNER_ID}" >/dev/null 2>&1 || true
        else
          echo "Runner ${RUNNER_NAME} not found or already removed."
        fi
